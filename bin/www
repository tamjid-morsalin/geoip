#!/usr/bin/env node

const http = require('http');
const debug = require('debug')('geoip:server');
const bootstrap = require('../app')();

bootstrap.then((app) => {
  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.APP_PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);
  if (!process.env.NET_INTERFACE) {
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, () => { console.log(`Geo-IP App is listening on *:${port}`); });
  } else {
    server.listen(port, process.env.NET_INTERFACE, () => { console.log(`Geo-IP App is listening on ${process.env.NET_INTERFACE}:${port}`); });
  }

  server.on('error', onError(port));
  server.on('listening', onListening(server));
}).catch((err) => {
  console.log(err);
  process.exit(1);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(port) {
  return function (error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? `Pipe ${port}`
      : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  };
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  return function () {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
  };
}